Question 1:-

/*

int arr[]={1,2,5,6,7};
int arr[]={1,3,5,6,7};
int arr[]={1,3,5,6,3};
int sum=6;

o/p- > (1,5)

only two numbers
only single combination we need

*/


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

class Scratch {
    public static void main(String[] args) {
        int arr[]={1,2,5,6,7};
        int sum=6;
        System.out.println("Numbers are : "+getSum(arr,sum));
    }
   static List<Integer> getSum(int a[],int sum){
        int i=0,j=0;
        for ( i = 0; i < a.length-1; i++) {
            for ( j = i+1; j < a.length; j++) {
                if((a[i]+a[j])==sum){
                    break;
                }
            }
        } // n^2
       HashMap<Integer,Object> map=new HashMap<>(); //


        return  new ArrayList<>(Arrays.asList(a[i],a[j]));
    }
}


Question 2:-


/*
                Y
            a      D
          b   c
        E       F
                    Z

left and right , binary Tree

I/P -> E,Z
I/P -> A,F
O/P -> A
YABE
YACFZ
 */

/*

 Y -> left == 'E'

 */
class Scratch {
    public static void main(String[] args) {


    }


}