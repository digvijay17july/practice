
*** Working and implementation of Doubly Linked List?
 
	* Doubly linked lists::-


		{node 1 -data, next, prev}-> {<-Node 2}
	
		1 node contains address of next and the previous node address

*** HashMap vs HashSet Vs TreeSet?

		HashMap--><key, value>
		HashSet--><Key, dummy object>
		TreeSet--> uses tree to store element and maintains order!



*** We have an array a[10, 13, 2, 69, 40, 29, 90] and we have to retrieve the largest 3 elements, i.e., x = 3, 
	then our program should print 90, 69 and 40?

	 *	Arrays.sort(a);

	 *	for(int i=0;i<n;i++){
			for(j=i;j<n-i-1;j++){
				if(a[j]>a[j+1]){
					int tem=a[j];
					a[j]=a[j+1];
					a[j+1]=temp;
				}
			}
		}

	* heapify(int a[], int max, int n){
		int i=max;
		int left= 2*max+1;
		int right= 2*max+2;

		if(left<n && a[left]>a[max]){
			max=left;
			}
		if(right<n && a[right]>a[max]){
			max=right;
			}

		if(i!=max){
			int temp= a[max];
			a[max]=a[i];
			a[i]=temp;
			heapify(a,max,n);
		}
	  }


Sort ** Input : Key = Jayant, Value = 80
				Key = Anushka, Value = 80
				Key = Amit, Value = 75
				Key = Abhishek, Value = 90
				Key = Danish, Value = 40
		Output : Sorted Map according to Names:
				Key = Abhishek, Value = 90
				Key = Amit, Value = 75
				Key = Anushka, Value = 80
				Key = Danish, Value = 40
				Key = Jayant, Value = 80


			*	Treeset(new Comparator(){
					int compare(Object o1,Object o2){
					if(o1.value>O2.value){
					return 1;
					}
					else 
						if(
							o1.value<O2.value){
						return -1;
						}else
						{
						return 0;
						}
					}
				})


		**		Collections.sort(tree, new Comparator(){
				int compare(Object o1,Object o2){
				if(o1.value>O2.value){
					return 1;
				}else 
					if(o1.value<O2.value){
				return -1;
					}else
				{
					return 0;
				}
					}
				});

	** str = A B E F C B D D C A A E C F F E
		first count occurrence of each variable ( A = 3, B = 2, E = 3, F = 3, C = 3, D = 2)
		final String without duplicate (ABEFCD)
		remove first occurrence of variable & print rest duplicates in descending order
		(B D C A A E C F F E â€“ reverse)

		* String stringOperation(String str){	

			int size=str.length();

			char[] ch=str.toCharArray();
			HashMap<String,Integer> map=new HashMap();
			for(int i=0;i<size;i++){
			   String temp=String.valueOf(ch[i]);
			   
			   if(map.contains(temp)==null){
			   map.put(temp, 1);
			   }else{
				map.put(temp, map.get(temp)+1);
			   }
			}
			for(Map.Entry<String,Integer> entry: map.entrySet()){
			sout --> entry.getkey : entry:value
			}
			StringBuilder unique=new StringBuilder("");

			for(Map.Entry<String,Integer> entry: map.entrySet()){
				unique.append(entry.getKey());
				map.put(entry.getKey(),entryValue-1);
			}
			Sout--> unique.toString();

			}

				String repeated(String str){
			StringBuilder repeated=new StringBuiler("");

			for(Map.Entry<String,Integer> entry: map.entrySet()){
				for(int i=0;i<entry.value(); i++){
				repeated.append(entry.key);
				}
			}

			Char [] tempArray=repeated.toString().toCharArray();

			Array.sort(tempArray);

			repeated=new StringBuiler("");
			for(int i=0;i<tempArray.length;i++){
			repeated.append(String.valueOf(temparray[i]));
			}

			Sout repeated



			String str;

			StringBuilder temp1=new StringBuilder("");
			temp1.append(str.charAt(0));
			StringBuilder temp2=new StringBuilder("");

			for(int i=1;i<str.length;i++){
				if(temp1.contains(str.charAt(i))){
				temp2.append(String.valueOf(str.charAt(i)));
				}else{
				temp1.append(String.valueOf(str.charAt(i)));
				}
			}
			temp2.reverse();
			sout --> temp2.toString();

			bubble sort
			heapsort
			mergesort
			pivotal-selection sort
			bucket sort
