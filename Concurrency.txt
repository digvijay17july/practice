 MultiThreading---
 
Java.lang.ThreadGroup class in Java--
ThreadGroup creates a group of threads. It offers a convenient way to manage groups of threads as a unit.
This is particularly valuable in situation in which you want to suspend and resume a number of related threads.

The thread group form a tree in which every thread group except the initial thread group has a parent.
A thread is allowed to access information about its own thread group but not to access information about its thread group’s parent thread group or 
any other thread group.
 

 Constructors:
 1. public ThreadGroup(String name): Constructs a new thread group. The parent of this new group is the thread group of the currently running thread.
 2. public ThreadGroup(ThreadGroup parent, String name): Creates a new thread group. The parent of this new group is the specified thread group.
 
 Methods--
 1. int activeCount(): This method returns the number of threads in the group plus any group for which this thread is parent.
 2. int activeGroupCount(): This method returns an estimate of the number of active groups in this thread group.
 3. void checkAccess(): Causes the security manager to verify that the invoking thread may access and/ or change the group on which checkAccess() is called.
 4. int enumerate(Thread group[]): The thread that comprise the invoking thread group are put into the group array.
 5. int enumerate(Thread[] group, boolean recurse): The threads that comprise the invoking thread group are put into the group array. 
 6  If all is true, then threads in all subgroups of the thread are also put into group.
 7. int enumerate(ThreadGroup[] group): The subgroups of the evoking thread group are put into the group array.
 8. int enumerate(ThreadGroup[] group, boolean all): The subgroups of the invoking thread group are put into the group array. 
    If all is true, then all subgroups of the subgroups(and so on) are also put into group.
 9. int getMaxPriority(): Returns the maximum priority setting for the group.
 10. String getName(): This method returns the name of the group.
 11. ThreadGroup getParent(): Returns null if the invoking ThreadGroup object has no parent. Otherwise, it returns the parent of the invoking object.
 12. void interrupt(): Invokes the interrupt() methods of all threads in the group.
 13. boolean isDaemon(): Tests if this thread group is a daemon thread group. 
     A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed.
 14. boolean isDestroyed(): This method tests if this thread group has been destroyed.
 15  void list(): Displays information about the group.
 16. void setDaemon(boolean isDaemon): This method changes the daemon status of this thread group.
     A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed.
 
 
 Java.lang.ThreadLocal class in Java--
This class provides thread local variable. These variables differ from their normal counterparts in that each thread that accesses one 
(via its get or set method) has its own, independently initialized copy of the variable.
Basically it is an another way to achieve thread safety apart from writing immutable classes.
Since Object is no more shared there is no requirement of Synchronization which can improve scalability and performance of application.
It extends class Object.
ThreadLocal provides thread restriction which is extension of local variable.
ThreadLocal are visible only in single thread. No two thread can see each others thread local variable.
These variable are generally private static field in classes and maintain its state inside thread.
 
 Constructor: 
ThreadLocal(): This creates a thread local variable.

 Methods--
 1. Object get(): This method returns the value in the current thread’s copy of this thread-local variable. If the variable has no value for the current thread,
                 it is first initialized to the value returned by an invocation of the initialValue() method.
 2. void set(Object value): This method sets the current thread’s copy of this thread-local variable to the specified value.
                 Most subclasses will have no need to override this method, relying solely on the initialValue() method to set the values of thread-locals.	
 3. void remove(): This method removes the current thread’s value for this thread-local variable. If this thread-local variable is subsequently read by the current thread, its value will be reinitialized by invoking its initialValue() method,
                unless its value is set by the current thread in the interim. This may result in multiple invocations of the 
				initialValue method in the current thread.
 4. Object initialValue(): This method returns the current thread’s initial value for this thread-local variable.		

 
 Object Level Lock in Java vs Class Level Lock in Java
 
 Object level lock is mechanism when we want to synchronize a non-static method or non-static code block such that only one thread will be able to execute the code block on given instance of the class.
 This should always be done to make instance level data thread safe.
 
  Class level lock in Java
Class level lock prevents multiple threads to enter in synchronized block in any of all available instances of the class on runtime. 
This means if in runtime there are 100 instances of DemoClass, 
then only one thread will be able to execute demoMethod() in any one of instance at a time, and all other instances will be locked for other threads.

Class level locking should always be done to make static data thread safe. As we know that static keyword associate data of methods to class level,
 so use locking at static fields or methods to make it on class level.
 
 
 Concurrency ---------
 
 Future(I) , FutureTask(C), CompleatabldeFuture
 
 
 ---Contdown Latch
 
 CountDownLatch works in latch principle,  main thread will wait until Gate is open. One thread waits for n number of threads specified while creating CountDownLatch in Java. Any thread, usually main thread of application,  which calls CountDownLatch.await() will wait until count reaches zero or its interrupted by another Thread. All other thread are required to do count down by calling CountDownLatch.countDown() once they are completed or ready to the job. as soon as count reaches zero, Thread awaiting starts running. One of the disadvantage of CountDownLatch is that its not reusable once count reaches to zero you can not use CountDownLatch any more, but don't worry Java concurrency API has another concurrent utility called CyclicBarrier for such requirements.

Real life example-- 
CountDownLatch example, Java program requires 3 services namely CacheService, AlertService  and ValidationService  to be started and ready before application can handle any request and this is achieved by using CountDownLatch in Java

 program example-- https://javarevisited.blogspot.com/2012/07/countdownlatch-example-in-java.html
 
 
 When should we use CountDownLatch in Java :
Use CountDownLatch when one of Thread like main thread, require to wait for one or more thread to complete, before its start doing processing. Classical example of using CountDownLatch in Java  is any server side core Java application which uses services architecture,  where multiple services is provided by multiple threads and application can not start processing  until all services have started successfully as shown in our CountDownLatch example.


CountDownLatch in Java – Things to remember
Few points about Java CountDownLatch which is worth remembering:

1) You can not reuse CountDownLatch once count is reaches to zero, this is the main difference between CountDownLatch and CyclicBarrier, which is frequently asked in core Java interviews and multi-threading  interviews.

2) Main Thread wait on Latch by calling CountDownLatch.await() method while other thread calls CountDownLatch.countDown() to inform that they have completed.

------Cyclic barrier

CyclicBarrier in Java on which we initialize CyclicBarrier with 3 parties, means in order to cross barrier, 3 thread needs to call await() method. each thread calls await method in short duration but they don't proceed until all 3 threads reached the barrier, once all thread reach the barrier, barrier gets broker and each thread started their execution from that point

Code example-- 
https://javarevisited.blogspot.com/2012/07/cyclicbarrier-example-java-5-concurrency-tutorial.html



When to use CyclicBarrier in Java
Given the nature of CyclicBarrier it can be very handy to implement map reduce kind of task similar to fork-join framework of Java 7, where a big task is broker down into smaller pieces and to complete the task you need output from individual small task e.g. to count population of India you can have 4 threads which count population from North, South, East, and West and once complete they can wait for each other, When last thread completed their task, Main thread or any other thread can add result from each zone and print total population. You can use CyclicBarrier in Java :

1) To implement multi player game which can not begin until all player has joined.
2) Perform lengthy calculation by breaking it into smaller individual tasks, In general, to implement Map reduce technique.

Important point of CyclicBarrier in Java
1. CyclicBarrier can perform a completion task once all thread reaches to the barrier, This can be provided while creating CyclicBarrier.

2. If CyclicBarrier is initialized with 3 parties means 3 thread needs to call await method to break the barrier.
3. The thread will block on await() until all parties reach to the barrier, another thread interrupt or await timed out.
4. If another thread interrupts the thread which is waiting on barrier it will throw BrokernBarrierException as shown below:

java.util.concurrent.BrokenBarrierException
        at java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:172)
        at java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:327)

5.CyclicBarrier.reset() put Barrier on its initial state, other thread which is waiting or not yet reached barrier will terminate with java.util.concurrent.BrokenBarrierException.

That's all on  What is CyclicBarrier in Java When to use CyclicBarrier in Java and a Simple Example of How to use CyclicBarrier in Java . We have also seen the difference between CountDownLatch and CyclicBarrier in Java and got some idea where we can use CyclicBarrier in Java Concurrent code.

